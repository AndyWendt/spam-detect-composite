<?php

module_load_include('inc', 'spam_detect_composite', 'spam_detect_composite.admin');
module_load_include('inc', 'spam_detect_composite', 'spam_detect_composite.utils');
module_load_include('inc', 'spam_detect_composite', 'spam_detect_composite.spam_tests');

/**
 * Implements hook_menu().
 */
function spam_detect_composite_menu() {

  return array(
    'admin/config/system/spam_detect/composite' => array(
      'title'            => 'Composite',
      'type'             => MENU_LOCAL_TASK,
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('spam_detect_composite_settings_form'),
      'access arguments' => array('administer spam detect'),
    )
  );
}

/**
 * Implements hook_spam_detect().
 */
function spam_detect_composite_spam_detect($text, stdClass $context = NULL) {
  $vars       = spam_detect_composite_get_vars();
  $spam_score = spam_detect_composite_text_scores($text, $vars);
  if (is_object($context)) {
    $context_score = spam_detect_composite_context_scores($context, $vars);
    $spam_score    = array_merge($spam_score, $context_score);
  }
  debug($spam_score);
  return spam_detect_composite_calculate_combined_score($spam_score, $vars->calculate_combined_score->threshold);
}

/**
 * @param          $text text to test for spamminess
 * @param stdClass $vars array of objects
 *
 * @return array
 */
function spam_detect_composite_text_scores($text, stdClass $vars) {
  $links_array = array_filter(spam_detect_composite_find_links($text));
  if (isset($links_array) && !empty($links_array)) {
    $spam_score['links_in_body'] = spam_detect_composite_links_in_body_score(
      count($links_array),
      $vars->links_in_body_score->increase,
      $vars->links_in_body_score->decrease,
      $vars->links_in_body_score->threshold
    );
  }

  $spam_score['body_length'] = spam_detect_composite_body_length_score(
    $text,
    count($links_array),
    $vars->body_length_score->increase,
    $vars->body_length_score->decrease,
    $vars->body_length_score->threshold
  );
  $spam_score['first_word']  = spam_detect_composite_first_word(
    $text,
    $vars->first_word->increase,
    $vars->first_word->first_word_list
  );

  return $spam_score;
}

/**
 * @param stdClass $context object of type comment:node
 * @param stdClass $vars    array of objects
 *
 * @return array
 */
function spam_detect_composite_context_scores(stdClass $context, stdClass $vars) {
  $nid           = $context->nid;
  $site_comments = spam_detect_get_all_comments_with_flags($nid);
  $node_comments = spam_detect_composite_get_node_comments_from_all_comments($site_comments, $nid);
  array_pop($site_comments);
  $last_comment = array_pop($node_comments);

  $spam_score['author_name'] = spam_detect_composite_author_name_check(
    $last_comment->name,
    $vars->author_name_check->increase
  );
  $spam_score['url_length']  = spam_detect_composite_url_length(
    $last_comment->author_url,
    $vars->url_length->increase,
    $vars->url_length->threshold
  );
  $spam_score['tlds']        = spam_detect_composite_tlds(
    $last_comment->author_url,
    $vars->tlds->increase,
    $vars->tlds->spammy_tld_list
  );
  $spam_score['words_chars'] = spam_detect_composite_url_words_characters(
    $last_comment->author_url,
    $vars->url_words_characters->increase,
    $vars->url_words_characters->words_chars_list
  );

  $spam_score['consonants_email'] = spam_detect_composite_consonants(
    $last_comment->email,
    $vars->consonants->increase
  );

  $spam_score['consonants_name'] = spam_detect_composite_consonants($last_comment->name, $vars->consonants->increase);

  $spam_score['body_in_previous_comment'] = 0;
  foreach ($node_comments as $node_single_comment) {
    $spam_score['body_in_previous_comment'] +=
      spam_detect_composite_body_in_previous_comment(
        $node_single_comment,
        $last_comment,
        $vars->body_in_previous_comment->increase
      );
  }

  $spam_score['status_of_previous_comments'] = 0;
  foreach ($site_comments as $site_single_comment) {
    $spam_score['status_of_previous_comments'] +=
      spam_detect_composite_status_of_previous_comment(
        $site_single_comment,
        $last_comment,
        $vars->status_of_previous_comment->increase,
        $vars->status_of_previous_comment->decrease,
        $vars->status_of_previous_comment->flag
      );
  }
  return $spam_score;
}

function spam_detect_composite_calculate_combined_score(array $spam_score_array, $spam_threshold) {
  $spam_score = array_sum($spam_score_array);
  if ($spam_score <= 0) return 0;
  if (($spam_score / $spam_threshold) > 1) return 1;
  return $spam_score / $spam_threshold;
}

