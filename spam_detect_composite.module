<?php

/**
 * @file
 * Checks text against multiple filters to ascertain spamminess
 */

module_load_include('inc', 'spam_detect_composite', 'spam_detect_composite.admin');

/*=============================
=            Hooks            =
=============================*/

/**
 * Implements hook_menu().
 */
function spam_detect_composite_menu() {
	
  return array('admin/config/system/spam_detect/composite' => array(
    'title' => 'Composite',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spam_detect_composite_settings_form'),
    'access arguments' => array('administer spam filter'),
  ));
}

/**
 * Implements hook_spam_detect().
 */
function spam_detect_composite_spam_detect($text, $context) {
	$links_array = spam_detect_composite_find_links($text);
	$spam_threshold = variable_get('spam_detect_composite_score_threshold');
	$spam_score = array();

	$spam_score[] = spam_detect_composite_links_in_body_score($links_array[0]);
	$spam_score[] = spam_detect_composite_body_length_score($text, $links_array[0]);
	$spam_score[] = spam_detect_composite_consonants($text);
	$spam_score[] = spam_detect_composite_first_word($text);
	$spam_score[] = spam_detect_composite_url_checks($links_array[0]);

	$spam_score = array_sum($spam_score);

	if ($spam_score > 0) {
		if (($spam_score / $spam_threshold) > 1) {
			return 1;
		} 
		else {
			return $spam_score / $spam_threshold;
		}
	}
	
	return 0;
}


/*-----  End of Hooks  ------*/


/*==================================
=            Spam Tests            =
==================================*/

function spam_detect_composite_url_checks($links_array) {
	if (class_exists('Pdp\Parser')) {
		$pslManager = new Pdp\PublicSuffixListManager();
		$parser = new Pdp\Parser($pslManager->getList());
		$i = 0;
		foreach ($links_array as $link) {
			$url = '';
			$url = $parser->parseUrl($link);
			$words_characters[$i]['path'] = $url->path;
			$words_characters[$i]['query'] = $url->query;
			$tlds[$i] = $url->host->publicSuffix;
			$url_length[$i]['tld'] = $url->host->publicSuffix;
			$url_length[$i]['domain'] = $url->host->registerableDomain; 
			$i++;
		}	
		$spam_score[] = spam_detect_composite_url_words_characters($words_characters);	
		$spam_score[] = spam_detect_composite_url_tlds($tlds);
		$spam_score[] = spam_detect_composite_url_length($url_length);

		return array_sum($spam_score);
	} 
	return 0; //can't parse without class
}

function spam_detect_composite_url_words_characters($words_characters) {
}

function spam_detect_composite_url_tlds($tlds) {
}

function spam_detect_composite_url_length($url_length) {
}

function spam_detect_composite_links_in_body_score($links_array) {
	$link_count = count($links_array);
	$threshold = variable_get('spam_detect_composite_link_body_count');
	$decrease  = variable_get('spam_detect_composite_body_length_decrease_spamminess');
	$increase = variable_get('spam_detect_composite_link_body_count_increase_spamminess');

 	if ($threshold < 0) { 
		$spam_score = 0; // Filter is set to off: -1
	} 
	elseif ($link_count < $threshold) {
		$spam_score = -$decrease;
	}
	elseif ($link_count >= $threshold) {
		$spam_score = $link_count * $increase;
	} 

	return $spam_score;
}

function spam_detect_composite_body_length_score($text, $links_array) {
	$length = strlen(str_replace(' ', '', $text));
	$link_count = count($links_array);
	$threshold = variable_get('spam_detect_composite_body_length_threshold');
	$decrease = variable_get('spam_detect_composite_body_length_decrease_spamminess');
	$increase = variable_get('spam_detect_composite_body_length_increase_spamminess');

	if ($threshold < 0) {
		$spam_score = 0; // Filter is set to off: -1
	}
	elseif ($length > $threshold && $link_count == 0) {
		$spam_score = -$decrease;
	} 
	elseif ($length < $threshold) {
		$spam_score = $increase;
	} 
	else {
		$spam_score = 0;
	}

	return $spam_score;
}

function spam_detect_composite_consonants($text) {
	$increase = variable_get('spam_detect_composite_consonants_increase');
	preg_match_all('/[bcdfghjklmnpqrstvwxz]{6}/i', $text, $matches);  // matches 6 or mor

	if ($increase < 0) {
		$spam_score = 0; // Filter set to off: -1
	}
	else {
		$spam_score = count($matches[0]) * $increase;
	}

	return $spam_score;
}

function spam_detect_composite_first_word($text) {
	$increase = variable_get('spam_detect_composite_first_word_increase');

	$spammy_words = strtolower(variable_get('spam_detect_composite_first_word_list'));	
	$spammy_words = array_map('trim', explode("\n", $spammy_words));

	$first_word = strtolower(strtok($text, ' '));
	$first_word = preg_replace('/[^A-Za-z0-9\-]/', '', $first_word); // remove special chars

	if ($increase < 0){
		return 0; // filter set to off 
	} 
	elseif (in_array($first_word, $spammy_words)) {
		return $increase;
	}
	return 0;
} 

/*-----  End of Spam Tests  ------*/


/*==================================================
=            Utils / Helpers / Defaults            =
==================================================*/


function _spam_detect_composite_first_word_list() {
	return <<<EOT
Interesting
Sorry
Nice
Cool
EOT;
}


function spam_detect_composite_find_links($text) {

	// Regex by John Gruber: http://daringfireball.net/2010/07/improved_regex_for_matching_urls
	// License: Public Domain
	$regex = '~(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:\'".,<>?«»“”‘’]))~';

	preg_match_all($regex, $text, $links_array);

	return $links_array;
} 


/*-----  End of Utils / Helpers / Defaults  ------*/
